package soliterrible;

import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The main game board area
 * Manages starting games, exiting, and checking win conditions
 * @author Jason LaFrance
 */
public class GameBoard extends JFrame implements FoundationListener {

    /**
     * Creates new form GameBoard
     */
    
    private boolean activeGame = false;
    private SuitPile [] suitFoundation;
    DiscardPile discardPile;
    DeckPile gameDeck;
    NonSuitPile [] nonSuitFoundation;
            
    /**
     * Constructor with default values
     */
    public GameBoard() {
        initComponents();
        this.setSize(690, 600);
        
    }
    
    @Override
    public void triggered(Object o){
        checkWin();
    }
    
    /**
     * Checks for a win state and acts accordingly
     */
    protected void checkWin(){
        // check for win!
        int count = 0;
        for(int i = 0; i < 4; i++){
            // check if foundation is full
            count += suitFoundation[i].getCardCount();
        }
        // if all four 
        if(count == 52){
            activeGame = false;
            // disable mouse events
            for(int i = 0; i < gameField.getComponentCount(); i++){
                if(gameField.getComponent(i) instanceof MouseListener)
                    gameField.getComponent(i).removeMouseListener((MouseListener)gameField.getComponent(i));
            }

            //display win dialog
            JOptionPane.showMessageDialog(this, "Sorry.  Your princess is in another castle.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameField = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        exitGame = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SoliTerrible");
        setBackground(new java.awt.Color(0, 128, 0));

        gameField.setBackground(new java.awt.Color(0, 128, 0));

        javax.swing.GroupLayout gameFieldLayout = new javax.swing.GroupLayout(gameField);
        gameField.setLayout(gameFieldLayout);
        gameFieldLayout.setHorizontalGroup(
            gameFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        gameFieldLayout.setVerticalGroup(
            gameFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );

        jMenu2.setText("Game");

        newGame.setText("New Game");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });
        jMenu2.add(newGame);
        jMenu2.add(jSeparator1);

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        exitGame.setText("Exit");
        exitGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitGameActionPerformed(evt);
            }
        });
        jMenu2.add(exitGame);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitGameActionPerformed
        Object[] options = {"Yes! I give up!",
                    "No! I will triumph!"};
        int n = JOptionPane.showOptionDialog(this,
            "Would you like to exit?",
            "Quit?",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[1]);
        if(n == 0) System.exit(1);
    }//GEN-LAST:event_exitGameActionPerformed

    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameActionPerformed
        Object[] options = {"Yes! I want to restart!!",
                    "No! I will endure!"};
        int n = 0;
        if(activeGame){
            n = JOptionPane.showOptionDialog(this,
                "Not finishing what you started?",
                "Restart?",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);
        }
        
        if(n == 0){
            resetBoard();
        }
    }//GEN-LAST:event_newGameActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this, "SoliTerrible\nJason LaFrance  2013");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetBoard(){
        // remove listeners
        for(int i = 0; i < gameField.getComponentCount(); i++){
            if(gameField.getComponent(i) instanceof MouseListener){
                gameField.removeMouseListener((MouseListener)gameField.getComponent(i));
            }
            else if(gameField.getComponent(i) instanceof Foundation){
                Foundation f = (Foundation)(gameField.getComponent(i));
                f.removeAllListeners();
            }
            
        }

        //this.removeComponentListener(null);

        // clear the game board
        gameField.removeAll();

        // add foundations
        suitFoundation = new SuitPile[4];
        int setX, setY;
        setY = 20;
        setX = 20;
        for(int i = 0; i < 4; i++){
            suitFoundation[i] = new SuitPile(72, 96, 0);
            gameField.add(suitFoundation[i]);
            suitFoundation[i].setLocation(setX, setY);
            suitFoundation[i].addListener(this);
            setX += suitFoundation[i].getWidth() + 20;
        }
            
        // add discard pile
        setX += 100;
        discardPile = new DiscardPile(72, 96, 0);
        gameField.add(discardPile);
        discardPile.setLocation(setX, setY);
        setX += discardPile.getWidth() + 20;
        
        // add deck
        gameDeck = new DeckPile(72, 96);
        // add images
        ArrayList<Card> workList = new ArrayList<>();
        while(gameDeck.getCardCount() > 0)
            workList.add(gameDeck.removeCard());
        
        // load the back image
        BufferedImage backImage;
        try {
           backImage = ImageIO.read(this.getClass().getResource("/images/backBlue.png"));
        } catch (IOException e) {
            backImage = new BufferedImage(72, 96, BufferedImage.TYPE_INT_RGB);
        }
            
        BufferedImage faceImage;
        for(int i = 0; i < workList.size(); i++){
            String filename = "/images/" + workList.get(i).toString() + ".png";
            
            try {
                faceImage = ImageIO.read(this.getClass().getResource(filename));
            } catch (IOException e) {
                faceImage = new BufferedImage(72, 96, BufferedImage.TYPE_INT_RGB);
            }
                
            workList.get(i).setFaceImage(faceImage);
            workList.get(i).setBackImage(backImage);
        }
            
        gameDeck.setCards(workList);
        gameDeck.shuffle(1000);

        gameField.add(gameDeck);
        gameDeck.setLocation(setX, setY);
            
        setX = 20;
        setY += 120;

        // add non-suit foundations
        nonSuitFoundation = new NonSuitPile[7];
        for(int i = 0; i < 7; i++){
            nonSuitFoundation[i] = new NonSuitPile(72, 96, 20);
            
            // add CardStacks
            ArrayList<Card> insCards = new ArrayList<>();
            for(int n = 0; n < i + 1; n++){
                Card insCard = gameDeck.removeCard();

                insCard.setOrientation(CardOrientation.FACEDOWN);
                insCards.add(insCard);
            }
            
            nonSuitFoundation[i].addCards(insCards);
            // set top card as face up
            nonSuitFoundation[i].flipTopCard();
            gameField.add(nonSuitFoundation[i]);
            nonSuitFoundation[i].setLocation(setX, setY);
            setX += nonSuitFoundation[i].getWidth() + 21;
        }
                
        // set game as active
        activeGame = true;
        gameField.setEnabled(true);
        this.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoard().setVisible(true);
            }
        });
    }
    
    // Overrides
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitGame;
    private javax.swing.JPanel gameField;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem newGame;
    // End of variables declaration//GEN-END:variables
}
